name: Cherry-Pick

on:
    workflow_dispatch:
        inputs:
            commit-shas:
                description: 'Comma-separated list of commit SHAs to cherry-pick'
                required: true
            version:
                description: 'Version for the release branch (optional)'
                required: false
            pr-title:
                description: 'Custom PR title'
                required: false
                default: 'Cherry-pick selected commits'
            pr-body:
                description: 'Custom PR description'
                required: false
                default: 'Automated PR to cherry-pick selected commits'

permissions:
    pull-requests: write
    contents: write
    repository-projects: write

jobs:
    validate-trigger:
        runs-on: ubuntu-latest
        steps:
            - name: Validate Commits
              run: |
                  if [[ -z "${{ github.event.inputs.commit-shas }}" ]]; then
                      echo "Error: At least one commit SHA is required." && exit 1
                  fi

    cherry-pick-and-create-pr:
        needs: validate-trigger
        runs-on: ubuntu-latest
        outputs:
            pr_number: ${{ steps.create_pr.outputs.pr_number }}
        steps:
            - name: Checkout Code
              uses: actions/checkout@v3
              with:
                  fetch-depth: 0

            - name: Configure Git
              run: |
                  git config --global user.name "github-actions"
                  git config --global user.email "github-actions@github.com"

            - name: Determine Branch Name
              id: branch_name
              run: |
                  if [[ -n "${{ github.event.inputs.version }}" ]]; then
                    branch_name="release/${{ github.event.inputs.version }}"
                  else
                    branch_name="cherry-pick-${GITHUB_RUN_ID}"
                  fi
                  echo "branch_name=$branch_name" >> $GITHUB_OUTPUT

            - name: Check If Branch Exists and Checkout
              run: |
                  if git ls-remote --exit-code --heads origin ${{ steps.branch_name.outputs.branch_name }}; then
                    echo "Branch ${{ steps.branch_name.outputs.branch_name }} already exists. Fetching latest changes..."
                    git fetch origin ${{ steps.branch_name.outputs.branch_name }}
                    git checkout ${{ steps.branch_name.outputs.branch_name }}
                    git pull origin ${{ steps.branch_name.outputs.branch_name }}
                  else
                    echo "Creating new branch ${{ steps.branch_name.outputs.branch_name }}"
                    git switch -c ${{ steps.branch_name.outputs.branch_name }} origin/${{ github.ref_name }}
                  fi

            - name: Cherry-Pick Commits
              env:
                  COMMIT_SHAS: ${{ github.event.inputs.commit-shas }}
              run: |
                  IFS=',' read -ra COMMITS <<< "$COMMIT_SHAS"
                  for commit in "${COMMITS[@]}"; do
                    git cherry-pick "$commit" || (echo "Failed to cherry-pick $commit" && exit 1)
                  done

            - name: Push Changes
              run: |
                  git push origin ${{ steps.branch_name.outputs.branch_name }}

            - name: Create or Update Pull Request
              id: create_pr
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  existing_pr=$(gh pr list --base "${{ github.ref_name }}" --head ${{ steps.branch_name.outputs.branch_name }} --json number --jq '.[0].number' || echo "")

                  if [[ -n "$existing_pr" ]]; then
                    echo "Updating existing PR #$existing_pr"
                    gh pr edit "$existing_pr" --add-label "github-actions"
                    echo "pr_number=$existing_pr" >> $GITHUB_OUTPUT
                  else
                    echo "Creating new PR"
                    pr_url=$(gh pr create \
                      --title "${{ github.event.inputs.pr-title }}" \
                      --body "${{ github.event.inputs.pr-body }}" \
                      --base "${{ github.ref_name }}" \
                      --head ${{ steps.branch_name.outputs.branch_name }} \
                      --repo ${{ github.repository }} \
                      --assignee "${{ github.actor }}" \
                      --label "github-actions")

                    pr_number=$(echo "$pr_url" | sed 's/.*\/\(.*\)/\1/')
                    echo "pr_number=$pr_number" >> $GITHUB_OUTPUT
                  fi

    auto-labeler:
        needs: cherry-pick-and-create-pr
        uses: ./.github/workflows/auto-labeler.yml
        with:
            pr-number: ${{ needs.cherry-pick-and-create-pr.outputs.pr_number }}
