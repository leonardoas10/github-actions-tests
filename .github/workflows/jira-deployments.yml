name: Mark PR as Deployed

on:
    pull_request:
        types:
            - closed
        branches:
            - main
            - qa
            - staging
            - prod

permissions:
    contents: read
    deployments: write

jobs:
    mark-deployment:
        if: github.event.pull_request.merged == true # Only run on merged PRs
        runs-on: ubuntu-latest

        steps:
            - name: Set environment dynamically based on the target branch
              id: set-env
              run: |
                  # Dynamically set the environment based on the target branch
                  if [[ "${{ github.event.pull_request.base.ref }}" == "main" ]]; then
                    echo "environment=dev" >> $GITHUB_ENV
                  elif [[ "${{ github.event.pull_request.base.ref }}" == "qa" ]]; then
                    echo "environment=qa" >> $GITHUB_ENV
                  elif [[ "${{ github.event.pull_request.base.ref }}" == "staging" ]]; then
                    echo "environment=staging" >> $GITHUB_ENV
                  elif [[ "${{ github.event.pull_request.base.ref }}" == "prod" ]]; then
                    echo "environment=prod" >> $GITHUB_ENV
                  else
                    echo "environment=none" >> $GITHUB_ENV
                  fi

            - name: Mark deployment in Jira
              uses: actions/github-script@v7
              with:
                  script: |
                      const { owner, repo } = context.repo;
                      const pr = context.payload.pull_request;
                      const ref = pr.merge_commit_sha;
                      const environment = process.env.environment;  // Access environment set in previous step

                      if (environment === 'none') {
                        console.log('No matching environment for this PR.');
                        return;
                      }

                      const deployment = await github.rest.repos.createDeployment({
                        owner,
                        repo,
                        ref: ref,
                        required_contexts: [],
                        environment: environment,
                        auto_merge: false,
                        transient_environment: false,
                        production_environment: false,
                        description: `PR #${pr.number} merged to ${environment} - marked as ${environment} deployment`,
                      });

                      await github.rest.repos.createDeploymentStatus({
                        owner,
                        repo,
                        deployment_id: deployment.data.id,
                        state: 'success',
                        environment_url: '', // Optional: link to staging or preview site
                        description: `Marked as deployed to ${environment}`,
                      });
