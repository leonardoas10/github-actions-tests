name: Mark PR as Deployed

on:
    pull_request:
        types:
            - closed
        branches:
            - main
            - qa
            - staging
            - prod

permissions:
    contents: read
    deployments: write

jobs:
    determine-environment:
        runs-on: ubuntu-latest
        outputs:
            environment: ${{ steps.set-env.outputs.environment }}
        steps:
            - name: Set environment dynamically based on the target branch
              id: set-env
              run: |
                  if [[ "${{ github.event.pull_request.base.ref }}" == "main" ]]; then
                    echo "environment=dev" >> $GITHUB_OUTPUT
                  elif [[ "${{ github.event.pull_request.base.ref }}" == "qa" ]]; then
                    echo "environment=qa" >> $GITHUB_OUTPUT
                  elif [[ "${{ github.event.pull_request.base.ref }}" == "staging" ]]; then
                    echo "environment=staging" >> $GITHUB_OUTPUT
                  elif [[ "${{ github.event.pull_request.base.ref }}" == "prod" ]]; then
                    echo "environment=prod" >> $GITHUB_OUTPUT
                  else
                    echo "Needs environment for continue"
                    exit 1
                  fi

    extract-jira-keys:
        runs-on: ubuntu-latest
        needs: determine-environment
        outputs:
            jira_keys: ${{ steps.extract-keys.outputs.jira_keys }}
        steps:
            - name: Extract Jira keys from PR title or commits
              id: extract-keys
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  echo "Extracting Jira issue keys..."
                  TARGET_BRANCH="${{ github.event.pull_request.base.ref }}"
                  TITLE="${{ github.event.pull_request.title }}"

                  if [[ "$TARGET_BRANCH" == "main" ]]; then
                    # Extract Jira keys from PR title
                    JIRA_KEYS=$(echo "$TITLE" | grep -oE 'LAS-[0-9]+' | sort -u | paste -sd "," -)
                  else
                    # Extract Jira keys from commits in the PR
                    COMMITS=$(gh pr view ${{ github.event.pull_request.number }} --json commits -q '.commits[].message')
                    JIRA_KEYS=$(echo "$COMMITS" | grep -oE 'LAS-[0-9]+' | sort -u | paste -sd "," -)
                  fi

                  echo "Found Jira keys: $JIRA_KEYS"
                  echo "jira_keys=$JIRA_KEYS" >> $GITHUB_OUTPUT

    mark-deployment:
        if: github.event.pull_request.merged == true
        runs-on: ubuntu-latest
        needs:
            - determine-environment
            - extract-jira-keys
        environment: ${{ needs.determine-environment.outputs.environment }}

        steps:
            - name: Echo environment and Jira keys
              run: |
                  echo "Current environment is: ${{ needs.determine-environment.outputs.environment }}"
                  echo "Jira keys: ${{ needs.extract-jira-keys.outputs.jira_keys }}"

            - name: Mark deployment in Jira
              uses: actions/github-script@v7
              with:
                  script: |
                      const { owner, repo } = context.repo;
                      const pr = context.payload.pull_request;
                      const ref = pr.merge_commit_sha;
                      const environment = "${{ needs.determine-environment.outputs.environment }}";
                      const jiraKeys = "${{ needs.extract-jira-keys.outputs.jira_keys }}";

                      if (!environment || environment === 'none') {
                        console.log('No matching environment for this PR.');
                        return;
                      }

                      const description = jiraKeys
                        ? `Jira issues: ${jiraKeys}`
                        : `PR #${pr.number} merged to ${environment}`;

                      const deployment = await github.rest.repos.createDeployment({
                        owner,
                        repo,
                        ref: ref,
                        required_contexts: [],
                        environment: environment,
                        auto_merge: false,
                        transient_environment: false,
                        production_environment: false,
                        description: description,
                      });

                      await github.rest.repos.createDeploymentStatus({
                        owner,
                        repo,
                        deployment_id: deployment.data.id,
                        state: 'success',
                        environment_url: '', // Optional: add preview/staging link
                        description: `Marked as deployed to ${environment}`,
                      });
